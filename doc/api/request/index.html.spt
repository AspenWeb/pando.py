doc_title = "Request"
doc_next = ('Response', '/response/')

[----------------------------------------]

{% extends doc.html %}
{% block doc %}

<p>The Aspen Request object tries to consistently model the actual structure of
an HTTP Request message. Consequently, it is rather verbose. There are
shortcuts available, however.</p>


<h3>Where?</h3>

<p>An instance of the <code>aspen.http.request.Request</code> class is made
available to you in your <a href="/simplates/">simplates</a> from the second
page on. It is also passed to your functions registered with the inbound_early
and inbound_late <a href="/hooks/">hooks</a>.</p>


<h3>Shortcuts</h3>

<p>The most common parts of the HTTP Request message are given these shortcuts
inside of simplate:</p>

<table>

    <tr><td>body</td><td>request.body</td></tr>
    <tr><td>cookie</td><td>request.headers.cookie</td></tr>
    <tr><td>headers&nbsp;</td><td>request.headers</td></tr>
    <tr><td>path</td><td>request.line.uri.path</td></tr>
    <tr><td>qs</td><td>request.line.uri.querystring</td></tr>

</table>

<p>For example, here&rsquo;s how to pull a value out of the querystring:</p>

<pre>foo = qs["foo"]
</pre>

<p>There are also booleans for each of the <a
    href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">standard HTTP
    methods</a>, so simplates in a <a
    href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST
    style</a> will end up looking like this:</p>

<pre>if GET:
    pass # handle GET )
elif POST:
    pass # handle POST</pre>

<p>There is no API that folds the querystring and body together. It&rsquo;s
better to be explicit about where you&rsquo;re expecting your values from.</p>


<h3>Full API</h3>

<p>The following object model is used to comprehensively represent an HTTP
Request message. Where &ldquo;raw&rdquo; attributes are noted those give the
bytes as supposedly received on the wire. As an optimization, this attribute is
lazily computed for request.body.raw. The request, itself a subclass of
str, is also dealt with lazily.</p>

<table style="margin-left: 0;">

    <tr><th><b><u>name</u></b></th><td><b><u>class</u></b></td><td><b><u>base&nbsp;type</u></b>&nbsp;</td><td><b><u>notes</u></b></td></tr>
    <tr><td>request</td><td>Request</td><td>str</td><td></td></tr>
    <tr><td>request.line</td><td>Line</td><td>str</td><td></td></tr>
    <tr><td>request.line.method</td><td>Method</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.method.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri</td><td>URI</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.uri.scheme</td><td>UnicodeWithRaw</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.uri.scheme.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.username</td><td>UnicodeWithRaw</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.uri.username.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.password</td><td>UnicodeWithRaw</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.uri.password.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.host</td><td>UnicodeWithRaw</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.uri.host.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.port</td><td>IntWithRaw</td><td>int</td><td>0 if absent</td></tr>
    <tr><td>request.line.uri.port.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.path</td><td>Path</td><td>Mapping</td><td></td></tr>
    <tr><td>request.line.uri.path.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.uri.path.decoded</td><td>unicode</td><td></td><td></td></tr>
    <tr><td>request.line.uri.path.parts</td><td>List of PathParts</td><td></td><td>see <a href="#path-parts">below</a></td></tr>
    <tr><td>request.line.uri.querystring</td><td>Querystring</td><td>Mapping</td><td></td></tr>
    <tr><td>request.line.uri.querystring.raw</td><td>str</td><td></td></tr>
    <tr><td>request.line.uri.querystring.decoded&nbsp;</td><td>unicode</td><td></td><td></td></tr>
    <tr><td>request.line.uri.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.version</td><td>Version</td><td>unicode</td><td></td></tr>
    <tr><td>request.line.version.info</td><td>tuple</td><td></td><td></td></tr>
    <tr><td>request.line.version.major</td><td>int</td><td></td><td></td></tr>
    <tr><td>request.line.version.minor</td><td>int</td><td></td><td></td></tr>
    <tr><td>request.line.version.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.line.raw</td><td>str</td><td></td><td></td></tr>
    <tr><td>request.headers</td><td><a href="#mapping">Headers</a></td></tr>
    <tr><td>request.headers.cookie</td><td><a
            href="http://docs.python.org/library/cookie.html#Cookie.SimpleCookie">Cookie.SimpleCookie</a>
            </td></tr>
            <tr><td>request.headers.host</td><td>unicode</td><td></td><td>X-Forwarded-For if it exists, Host
            otherwise (no Host will raise Response(400))</td></tr>
    <tr><td>request.headers.scheme</td><td>unicode</td><td></td><td>u"https" or u"http"</td></tr>
    <tr><td>request.headers.raw</td><td>str</td></tr>
    <tr><td>request.body</td><td><a href="#mapping">Body</a></td><td></td></tr>
    <tr><td>request.body.raw</td><td>str</td></tr>
</table>


<p>Here are the methods on the Request object:</p>

<pre>request.allow(*methods):
    """Given method strings, raise 405 if we don't meet the requirements.

    The method names are case insensitive (they are uppercased). If 405
    is raised then the Allow header is set to the methods given.

    """

request.is_xhr():
    """Check the value of X-Requested-With.
    """

request.redirect(location, code=None, permanent=False):
    """Given a string, an int, and a boolean, raise a Response.

    If code is None then it will be set to 301 (Moved Permanently)
    if permanent is True and 302 (Found) if it is False.

    """
</pre>

<a name="mapping"></a>
<h3>Mapping Objects</h3>

<p>The <code>Body</code>, <code>Headers</code>, <code>Path</code>, and
<code>Querystring</code> objects all have the same API. They are asymetric
dictionaries. With HTTP mappings you always need to deal with the &ldquo;either
list or value&rdquo; problem. Using them as simple values is much more common
then using them as lists of values, so the base dictionary access set/get
operations are tuned for that, and then you get this API for working with them
as lists of values:</p>

<pre>obj.all(name, default=None):
    """Given a name, return a list of values.
    """

obj.add(name, value):
    """Given a name and value, add another entry.
    """</pre>

<p>Putting those together, here&rsquo;s what it looks like:</p>

<pre>>>> headers['Content-Type'] = "text/html"
>>> headers['Content-Type'] = "text/plain" # changed my mind!
>>> headers['Content-Type']
text/plain
>>> headers.all('Content-Type')
['text/plain']</pre>

<p>Here&rsquo;s another example:</p>

<pre>>>> qs.add('likes', 'cheese!')
>>> qs.add('likes', 'grommit!')
>>> qs['likes']
'grommit!'
>>> qs.all('likes')
['cheese!', 'grommit!']</pre>

<p>They&rsquo;re asymetric in that subscript access respects the underlying
list while subscript assignment clobbers it.</p>


<a name="uploads"></a>
<h3>File Uploads</h3>

<p>If a request is of <code>Content-Type</code>
<code>multipart/form-data</code>, then <code>request.body</code> values that
are file uploads will be instances of the standard library&rsquo;s <a
    href="http://docs.python.org/library/cgi.html">cgi.FieldStorage</a> class.
Each such object has <code>filename</code>, <code>value</code>, and
<code>type</code> attributes with the name, bytes, and advertised Content-Type
of the file that was uploaded.</p>


<a name="path-parts"></a>
<h3>Path Parts</h3>

<p>Aspen <code>Path</code> objects have a <code>parts</code> attribute, which
is a list of <code>PathPart</code> objects. So if you're in a simplate
at <code>/foo/bar/baz.html.spt</code>, then <code>path.parts[1]</code> will be
<code>'bar'</code> and <code>path.parts[2]</code> will be
<code>'baz.html'</code>.</p>


<p><a
  href="http://tools.ietf.org/html/rfc2396.html">RFC2396</a> specifies a syntax
for attaching parameters to each path part, and Aspen exposes these in a
<code>params</code> attribute (which is a <code>Mapping</code> object) on each
<code>unicode</code> in the <code>path.parts</code> list.</p>

<p>Say what?</p>

<p>If you have:</p>

<pre>/foo/index.html.spt
</pre>

<p>and you hit it with:</p>

<pre>/foo;a=1;b;a=3/
</pre>

<p>then you can do:</p>

<pre>if 'b' in path.parts[0].params:
    a = path.parts[0].params['a']
\[---]
%(a)s
</pre>

and you'll get:

{{ screenshot("path-part-params") }}

{% end %}

