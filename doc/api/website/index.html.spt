doc_title = "Website"
doc_next = ""
[----------------------------------------]
{% extends "doc.html" %}
{% block doc %}

<p>Aspen creates an instance of <code>aspen.website.Website</code> when it
starts up. It holds all of the global configuration for your application. It is
placed in the namespace of your <a href="/simplates/">simplates</a>, where it
is available from the first page onwards. The following attributes are defined
based on configuration in the environment (<code>ASPEN_NAME</code>) and keyword
arguments to Website:</p>

<table>
    <tr><td><b><u>attribute</u></b></td><td><b><u>default</u></b></td> </tr>
    <tr><td>base_url</td><td>''</td> </tr>
    <tr><td>changes_reload</td><td>False</td> </tr>
    <tr><td>charset_dynamic</td><td>UTF-8</td> </tr>
    <tr><td>charset_static</td><td>None</td> </tr>
    <tr><td>indices</td><td>['index', 'index.html', 'index.json',
        'index.html.spt', 'index.json.spt']</td> </tr>
    <tr><td>logging_threshold</td><td>0 (most verbose)</td> </tr>
    <tr><td>media_type_default</td><td>text/plain</td> </tr>
    <tr><td>media_type_json</td><td>application/json</td> </tr>
    <tr><td>project_root</td><td>None</td> </tr>
    <tr><td>renderer_default</td><td>stdlib_percent</td> </tr>
    <tr><td>show_tracebacks</td><td>False</td> </tr>
    <tr><td>colorize_tracebacks</td><td>False</td> </tr>
    <tr><td>www_root</td><td>None</td> </tr>
    <tr><td>unavailable</td><td>0</td> </tr>
</table>


<h3>Computations</h3>

<p>The following computations are performed after environment and keyword
argument configuration is processed.</p>

<ul>

    <li>If <b>www_root</b> isn&rsquo;t set, then it&rsquo;s set to the current
    working directory If that is unavailable then aspen exits with a
    ConfigurationError. If the current working directory differs from www_root,
    it is changed to match www_root.</li>

    <li>If <b>project_root</b> is set, then the directory it points to is used
    to resolve <code>{&#37; extends %}</code> and {&#37; include %} <a
    href="/simplates/template/">templates</a> tags; any <a
    href="/mime.types/">mime.types</a> file in there will be loaded; and it will be
    placed at the front of sys.path, so you can import Python modules from
    there</li>

    <li>Two dictionaries associated with resolving renderers are instantiated 
    and populated: <b>renderer_factories</b> and
    <b>default_renderers_by_media_type</b>.</li>

</ul>

<p>After your configuration scripts are run, Aspen looks at the value for
unavailable, and if it&rsquo;s greater than zero it installs a handler that
returns <a
    href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4">503
    Service Unavailable</a> for all requests. The value of unavailable is
interpreted as the number of minutes of downtime you expect, and the
Retry-After header is set accordingly. You can access the header as a
datetime.datetime object at website.retry_after.</p>


<h3>Methods</h3>

<p>Here are the methods on the Website object:</p>

<pre>def redirect(self, location, code=None, permanent=False, base_url=None, response=None):
    """Raise a redirect Response.

    If code is None then it will be set to 301 (Moved Permanently) if
    permanent is True and 302 (Found) if it is False. If url doesn't start
    with base_url (defaulting to self.base_url), then we prefix it with
    base_url before redirecting. This is a protection against open
    redirects. If you provide your own response we will set .code and
    .headers['Location'] on it.

    """
</pre>
{% end %}
