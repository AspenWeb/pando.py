doc_title = "Simplates"
doc_next = ('Request', '/request/')
[----------------------------------------]
{% extends doc.html %}
{% block doc %}

<p>Simplates are the file format Aspen uses to represent HTTP resources.  They
are Aspen&rsquo;s main attraction. Here&rsquo;s what a simplate looks like:</p>

<pre>"""This is my simplate.
"""
import random

\[---]
n = random.choice(range(10))
extra_excitement = "!" * n

\[---]
Greetings, program!{&#123; extra_excitement &#125;}</pre>

<p>Simplates are a single file with one or more pages. The page separator is
<code>[---]</code>.</p>

<p>Assuming you&rsquo;ve gone through the <a href="/quick-start/">Quick
Start</a>, edit index.html.spt with the above content, then refresh.</p>

{{ screenshot("extra-excitement") }}

<p>You&rsquo;re off and running!</p>

<p>Give it a shot: Anything you define in the first two (Python) pages is
available in the third (template) page.</p>

<p>Can you guess what the difference is between the first two Python pages?
The first one is run once, the first time the page is hit (<i>not</i> on
startup), and again any time the simplate is changed. It&rsquo;s designed for
imports and constants. The second is run once for each request.</p>

<p>The first page has these variables defined and available to you:</p>

<pre>__file__   the absolute path to the simplate file (symlinks preserved)

<a href="/api/website/">website</a>    an instance of a Website object that gives you access to
           configuration objects</pre>

<p>The second page has those, and adds:</p>

<pre>request    a request object

response   a response object</pre>

<p>The <a href="rendered/">template page</a> uses the template language from
    python by default, though others are available.</p>

<p>All simplate pages are cached in a compiled state. This cache is invalidated
whenever the underlying file changes, so simplate changes are always
immediately available. When you change Python libraries or configuration files,
aspen can restart automatically. But even this extra second or so is a drag
during development. When you change a simplate, the changes are always
available immediately, without restarting the server.</p>


<h3>Different Kinds of Simplates</h3>

<p>Aspen uses the simplate file format to represent four different kinds of
resources. Media types are inferred from the file extension.</p>

<ol>

    <li><a href="/simplates/static/"><b>Static Simplates</b></a>&mdash;Any
    text/* or application/json file with no \[---] in it is served directly as
    a static file. Other media types are static unless they start with a
    docstring or an import.</li>

    <li><a href="/simplates/template/"><b>Rendered Simplates</b></a>&mdash;This
    is the main kind. It&rsquo;s what was introduced above. The first two pages
    are Python and then the third is <a href="template/">a templating
        syntax</a>.</li>

    <li><a href="/simplates/json/"><b>JSON Simplates</b></a>&mdash;Aspen has
    special support for JSON resources. There are only two pages, and whatever
    you set response.body to in the second page is serialized to JSON with the
    appropriate Content-Type.</li>

    <li><a href="/simplates/negotiated/"><b>Negotiated
            Simplates</b></a>&mdash;If a simplate file doesn&rsquo;t have a
    file extension, then it can be used to serve multiple media types.</li>

</ol>


<h3>Ack! Mixing logic and presentation?!?!?</h3>

<p>Well, I like to think that simplates bring code and presentation as close
together as possible <i>without</i> mixing them. There are no arbitrary Python
blocks inside of the template page, &agrave; la PHP/ASP.</p>

<p>Simplates are more like MVC, but with controllers, views, and templates
together in the same file instead of in separate files. Your models live in a
Python library, use an ORM, etc. And URL routing is done via the
filesystem. There&rsquo;s all around less boilerplate.</p>

<p>Simplates make it easy to kick off development of an app or feature of an
app. Simplates are, in fact, downright slippery. You won&rsquo;t be able to
stop innovating. You just open a single file and start writing Python,
JavaScript, CSS, HTML, SQL&mdash;whatever. It takes zero wiring to get it on
the network for the first time. And as apps/features mature, you will very
naturally move code out of your single simplate into separate Python libraries,
template files, JSON endpoint simplates, JavaScript libraries, CSS files,
etc.</p>

<p>Don&rsquo;t be scared! This isn&rsquo;t PHP! It&rsquo;s MVC with less
crap.</p>


<a name="history"></a>
<h3>History</h3>

<p>My friend Steve came up with the original idea for simplates in the early
aughts, when we were running a web design shop together. We were heavily into
Zope and Plone at the time. This was in the Zope 2 days. The original idea was
something like, &ldquo;What if you could put a Script (Python) and a ZPT in THE
SAME FILE!?&rdquo; Steve has since switched careers to philosophy. I debuted
simplates in Aspen 0.8, which came out in December of 2007. I made simplates
the main attraction in Aspen 0.9.</p>

{% end %}
