doc_title = "Simplates"
doc_next = ('Request', '/request/')
[---]
[---]
{% extends doc.html %}
{% block doc %}

<p><a href="http://simplates.org">Simplates</a> are the file format Aspen uses
to represent HTTP resources.  They are Aspen&rsquo;s main attraction.
Here&rsquo;s what a simplate looks like:</p>

<pre>"""This is my simplate.
"""
import random

\[---]
n = random.choice(range(10))
extra_excitement = "!" * n

\[---]
Greetings, program!%(extra_excitement)s
</pre>

<p>Simplates are a single file with one or more sections. The section separator
is <code>[---]</code>.</p>


<h3>Tutorial</h3>

<p>Assuming you&rsquo;ve gone through the <a href="/quick-start/">Quick
Start</a>, edit index.html.spt with the above content, then refresh.</p>

{{ screenshot("extra-excitement") }}

<p>You&rsquo;re off and running!</p>

<p>Give it a shot: Anything you define in the first two (Python) sections is
available in the third (template) section.</p>

<p>Can you guess what the difference is between the first two Python sections?
The first one is run once, the first time the section is hit (<i>not</i> on
startup), and again any time the simplate is changed. It&rsquo;s designed for
imports and constants. The second is run once for each request.</p>


<h3>Reference</h3>

<p>A simplate is a file that contains multiple sections of varying syntax,
separated by <code>[---]</code>.</p>

<p>If the simplate only has one section, it's a template.</p>

<p>If there's more than one section, the first section is always Python,
and the last section is always a template.</p>

<p>If there's more than two sections, the second section is Python
<em>unless it has a specline</em>, which makes it a template.</p>

<p>The first Python section is the 'once' section. It is
<code>exec</code>'d once, the first time the resource represented by the
simplate is served, and it has these variables as builtins:</p>

<pre>__file__   the absolute path to the simplate file (symlinks preserved)

<a href="/api/website/">website</a>    an instance of a Website object that gives you access to
           configuration</pre>


<p>The second Python section is the 'every' section. It is
<code>exec</code>'d once per request. Its context cascades from the
'once' section (if it exists), and adds:</p>

<pre>request    a request object

response   a response object</pre>

<p>The third page uses the templating language of your choosing&mdash;we call
this the &ldquo;renderer.&rdquo; The default renderer is the basic templating
    language that Python uses to render strings: %(varname)s is replaced by the
        variable 'varname' as a string.  More details are available in the <a
            href="http://docs.python.org/2/library/stdtypes.html#string-formatting">Python
            docs</a>. Other built-in templating languages are stdlib_format
            (using <a
                href="http://docs.python.org/2/library/string.html#format-string-syntax">
                Python string formatting</a>), stdlib_template (using <a
                href="http://docs.python.org/2/library/string.html#template-strings">Python
                template strings</a>), and <a href="/json/">json</a>. There are
                modules available with support for <a
                    href="http://www.tornadoweb.org/">Tornado</a>
                (aspen-tornado), <a href="http://jinja.pocoo.org/">Jinja2</a>
                (aspen-jinja2) and <a
                href="https://github.com/defunkt/pystache">Pystache</a>
            (aspen-pystache).

<p>The way to specify a renderer is with a so-called &ldquo;specline&rdquo; at
the start of the content page:</p>

<pre>program = "program"
\[---] via pystache
Greetings, {&#123; program }}!</pre>

<p>You can set the default renderer for a given media type (presuming it is
installed) like so:</p>

<pre>website.default_renderers_by_media_type['text/html'] = 'pystache'</pre>

<p>Here&rsquo;s how to directly set the default renderer for all media types:</p>

<pre>website.default_renderers_by_media_type.default_factory = lambda: 'pystache'</pre>

<p>This can also be phrased as:</p>

<pre>website.renderer_default = 'pystache'</pre>

<p>You can also set the default renderer globally using the renderer_default
keyword argument to Website, or the ASPEN_RENDERER_DEFAULT environment
variable.</p>


<h4>Bound Simplates</h4>

<p>If a simplate file has a penultimate file extension
(<code>foo.html.spt</code> as opposed to <code>foo.spt</code>), then it is
considered to be a &ldquo;bound simplate&rdquo;: it is bound to a particular
media type. In this case the first and second sections (the Python sections)
are optional.</p>


<h4>Unbound Simplates</h4>

<p>If a simplate file has no penultimate file extension (<code>foo.spt</code>
as opposed to <code>foo.html.spt</code>), then it is considered to be an &ldquo;unbound simplate&rdquo;: it is not bound to any particular media type.

<p>Instead, unbound simplates can have multiple so-called &ldquo;content&rdquo;
sections, and the order they appear in will determine their priority in <a
    href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html">HTTP content
    negotiation</a>.  If negotiation fails you&rsquo;ll get a <a
    href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7">406
    Not Acceptable</a> response, with a prioritized list of available media
    types.  Joe Gregorio&rsquo;s <a
        href="http://code.google.com/p/mimeparse/source/browse/trunk/mimeparse.py?r=22">content
    negotiation module</a> is vendored in to do the heavy lifting. The format
of the file is like this:</p>

<pre>import foo, json

\[---]
data = foo.bar(request)

\[---] text/plain via pystache
{&#123; data }}

\[---] application/json
{&#123; json.dumps(data) }}</pre>

<p>The first two sections of the file are logic sections as described above.
Both are required for an unbound simplate. After that may appear an unlimited
number of content sections.  The first line of each content section is the
so-called &ldquo;specline,&rdquo; where you must specify the media type of that
content section. You may optionally specify a renderer on the specline as
well.</p>

<p>If a file <i>does</i> have a file extension, then it is a &ldquo;bound
simplate&rdquo; with a media type computed from the file extension. It is a
<code>SyntaxError</code> for a file to have both a penultimate extension and
multiple content sections.</p>


<h4>Indirect Negotiation</h4>

<p>The canonical way to perform HTTP media type negotiation is with the <a
    href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">Accept
request header</a>. That&rsquo;s much more cumbersome than changing the file
extension in the URL, however, so Aspen supports both. If a request comes in
for <code>/foo.html</code> and there&rsquo;s no <code>foo.html.spt</code> on
the filesystem but there <i>is</i> a <code>foo.spt</code> file, then Aspen will
serve the request with that. If you request <code>foo.txt</code> but
<code>foo.spt</code> doesn&rsquo;t include a text/plain page then you&rsquo;ll
get a 404, whereas with direct negotiation as above you would get a 406 with a
list of available media types.</p>


<h4>Encoding</h4>

<p>By default, simplate files are presumed to be ASCII; if non-ASCII characters
(utf8, for example) are to be included in the file, an encoding must be specifed as per
<a href="http://legacy.python.org/dev/peps/pep-0263/">PEP 263</a>, which means
putting the phrase 'encoding: utf8' somewhere on the first two lines of the file.


<h4>Caching</h4>

<p>All simplate pages are cached in a compiled state. This cache is invalidated
whenever the underlying file changes, so simplate changes are always
immediately available. When you change Python libraries or configuration files,
aspen can restart automatically. But even this extra second or so is a drag
during development. When you change a simplate, the changes are always
available immediately, without restarting the server.</p>



<h3>Ack! Mixing logic and presentation?!?!?</h3>

<p>Well, I like to think that simplates bring code and presentation as close
together as possible <i>without</i> mixing them. There are no arbitrary Python
blocks inside of the template page, &agrave; la PHP/ASP.</p>

<p>Simplates are more like MVC, but with controllers, views, and templates
together in the same file instead of in separate files. Your models live in a
Python library, use an ORM, etc. And URL routing is done via the
filesystem. There&rsquo;s all around less boilerplate.</p>

<p>Simplates make it easy to kick off development of an app or feature of an
app. Simplates are, in fact, downright slippery. You won&rsquo;t be able to
stop innovating. You just open a single file and start writing Python,
JavaScript, CSS, HTML, SQL&mdash;whatever. It takes zero wiring to get it on
the network for the first time. And as apps/features mature, you will very
naturally move code out of your single simplate into separate Python libraries,
template files, JSON endpoint simplates, JavaScript libraries, CSS files,
etc.</p>

<p>Don&rsquo;t be scared! This isn&rsquo;t PHP! It&rsquo;s MVC with less
crap.</p>


<a name="history"></a>
<h3>History</h3>

<p>My friend Steve came up with the original idea for simplates in the early
aughts, when we were running a web design shop together. We were heavily into
Zope and Plone at the time. This was in the Zope 2 days. The original idea was
something like, &ldquo;What if you could put a Script (Python) and a ZPT in THE
SAME FILE!?&rdquo; Steve has since switched careers to philosophy. I debuted
simplates in Aspen 0.8, which came out in December of 2007. I made simplates
the main attraction in Aspen 0.9.</p>

{% end %}
